
Haskell Heist is a lot faster with compiled Haskell
 
Case 1. Templating with no database, but templates read from File

./test daniel
real    0m0.007s
user    0m0.000s
sys     0m0.004s

ruby ruby-test.rb
real    0m0.167s
user    0m0.016s
sys     0m0.020s

time runghc test.hs  test
real    0m0.329s
user    0m0.284s
sys     0m0.032s


Case 2. With Database Access

compiled haskell
./testdb
real    0m0.028s
user    0m0.004s
sys     0m0.012s

runghc testdb.hs
real    0m0.446s
user    0m0.392s
sys     0m0.032s

ruby ruby-testdb.rb
real    0m0.310s
user    0m0.160s
sys     0m0.016s




Haskell is fast. We can even put pagination markup at the bottom of the
results.

cabal install heist-0.11.0
cabal install snap from github repo --condition "errors == 1.4.1"


digestive functors example
mkdir log
runghc snap-heist.hs 


date-form.tpl
<dfInputText ref="day" size="2" />
/
<dfInputText ref="month" size="2" />
/
<dfInputText ref="year" size="4" />


user-form.tpl
<dfForm action="/">
    <dfChildErrorList />

    <dfLabel ref="name">Name: </dfLabel>
    <dfInputText ref="name" />
    <br>

    <dfLabel ref="password">Password: </dfLabel>
    <dfInputPassword ref="password" />
    <br>

    <dfLabel ref="sex">Sex: </dfLabel>
    <dfInputSelect ref="sex" />
    <br>

    Birthday:
    <dfSubView ref="birthdate">
        <apply template="date-form" />
    </dfSubView> 
    <br>

    <dfInputSubmit value="Enter" />
</dfForm>

user.tpl
<h1>User <name/></h1>
<p><user/></p>

